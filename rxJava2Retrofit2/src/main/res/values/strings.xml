<resources>
    <string name="app_name">RxJava2</string>

    <string name="create_title">create</string>
    <string name="create_desc">create操作符应该是最常见的操作符了，主要用于产生一个Obserable被观察者对象，为了方便大家的认知，
        以后的教程中统一把被观察者Observable称为发射器（上游事件），观察者Observer称为接收器（下游事件）。</string>

    <string name="map_title">map</string>
    <string name="map_desc">Map基本算是RxJava中一个最简单的操作符了，熟悉RxJava1.x的知道，它的作用是对发射时间发送的每一个事件应用一个函数，
        使得每一个事件都按照指定的函数去变化，而在2.x中它的作用几乎一致。</string>

    <string name="zip_title">zip</string>
    <string name="zip_desc">zip专用于合并事件，该合并不是连接（连接操作符后面会说），而是两两配对，
        也就意味着，最终配对出的Observable发射事件数目只和少的那个相同。</string>

    <string name="concat_title">concat</string>
    <string name="concat_desc">对于单一的把两个发射器连接成一个发射器，虽然zip不能完成，但我们还是可以自力更生，
        官方提供的concat让我们的问题得到了完美解决。</string>

    <string name="flatmap_title">FlatMap</string>
    <string name="flatmap_desc">FlatMap是一个很有趣的东西，我坚信你在实际开发中会经常用到。
        它可以把一个发射器Observable通过某种方法转换为多个Observables，
        然后再把这些分散的Observables装进一个单一的发射器Observable。
        但有个需要注意的是，flatMap并不能保证事件的顺序，如果需要保证，需要用到我们下面要讲的ConcatMap。</string>

    <string name="concatmap_title">concatMap</string>
    <string name="concatmap_desc">上面其实就说了，concatMap与FlatMap的唯一区别就是concatMap保证了顺序，
        所以，我们就直接把flatMap替换为concatMap验证吧。</string>

    <string name="distinct_title">distinct</string>
    <string name="distinct_desc">这个操作符非常的简单、通俗、易懂，就是简单的去重嘛，我甚至都不想贴代码，但人嘛，总得持之以恒。</string>

    <string name="filter_title">filter</string>
    <string name="filter_desc">信我，Filter你会很常用的，它的作用也很简单，过滤器嘛。可以接受一个参数，让其过滤掉不符合我们条件的值。</string>

    <string name="buffer_title">buffer</string>
    <string name="buffer_desc">buffer操作符接受两个参数，buffer(count,skip)，作用是将Observable中的数据按skip(步长)分成最大不超过count的buffer，
        然后生成一个Observable。也许你还不太理解，我们可以通过我们的示例图和示例代码来进一步深化它。</string>

    <string name="timer_title">timer</string>
    <string name="timer_desc">timer很有意思，相当于一个定时任务。在1.x中它还可以执行间隔逻辑，但在2.x中此功能被交给了interval，下一个会介绍。
        但需要注意的是，timer和interval均默认在新线程。</string>

    <string name="interval_title">interval</string>
    <string name="interval_desc">如同我们上面可说，interval操作符用于间隔时间执行某个操作，其接受三个参数，分别是第一次发送延迟，间隔时间，时间单位。</string>

    <string name="doOnNext_title">doOnNext</string>
    <string name="doOnNext_desc">其实觉得 doOnNext 应该不算一个操作符，但考虑到其常用性，我们还是咬咬牙将它放在了这里。
        它的作用是让订阅者在接收到数据之前干点有意思的事情。假如我们在获取到数据之前想先保存一下它，无疑我们可以这样实现。</string>

    <string name="skip_title">skip</string>
    <string name="skip_desc">skip很有意思，其实作用就和字面意思一样，接受一个long型参数count，代表跳过count个数目开始接收。</string>

    <string name="take_title">take</string>
    <string name="take_desc">take，接受一个long型参数count，代表至多接收count个数据。</string>

    <string name="just_title">just</string>
    <string name="just_desc">just，没什么好说的，其实在前面各种例子都说明了，就是一个简单的发射器依次调用onNext()方法。</string>

</resources>
