<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="simple">简单的网络请求</string>
    <string name="simpleDesc">1）通过Observable.create()方法，调用OkHttp网络请求；
        2）通过map操作符集合gson，将Response转换为bean类；
        3）通过doOnNext()方法，解析bean中的数据，并进行数据库存储等操作；
        4）调度线程，在子线程中进行耗时操作任务，在主线程中更新UI；
        5）通过subscribe()，根据请求成功或者失败来更新UI。。</string>

    <string name="cacheNetWork">缓存和网络</string>
    <string name="cacheNetWorkDesc">想必在实际应用中，很多时候（对数据操作不敏感时）都需要我们先读取缓存的数据，如果缓存没有数据，再通过网络请求获取，随后在主线程更新我们的UI。
        concat操作符简直就是为我们这种需求量身定做。
        concat可以做到不交错的发射两个甚至多个Observable的发射事件，并且只有前一个Observable终止(onComplete())后才会定义下一个Observable。
        利用这个特性，我们就可以先读取缓存数据，倘若获取到的缓存数据不是我们想要的，再调用onComplete()以执行获取网络数据的Observable，如果缓存数据能应我们所需，则直接调用onNext()，防止过度的网络请求，浪费用户的流量。</string>

    <string name="moreNetWorkFlatMap">多个网络请求依次依赖</string>
    <string name="moreNetWorkFlatMapDesc">1)想必这种情况也在实际情况中比比皆是，例如用户注册成功后需要自动登录，我们只需要先通过注册接口注册用户信息，注册成功后马上调用登录接口进行自动登录即可。
        2)我们的flatMap恰好解决了这种应用场景，flatMap操作符可以将一个发射数据的Observable变换为多个Observables，然后将它们发射的数据合并后放到一个单独的Observable，利用这个特性，我们很轻松地达到了我们的需求。</string>

    <string name="moreNetWorkUI">结合多个接口的数据更新UI</string>
    <string name="moreNetWorkUIDesc">1)在实际应用中，我们极有可能会在一个页面显示的数据来源于多个接口，这时候我们的zip操作符为我们排忧解难。
        2)zip操作符可以将多个Observable的数据结合为一个数据源再发射出去。</string>

</resources>